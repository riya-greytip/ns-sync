architecture: standalone
auth:
  authenticationPolicy: ''
  createDatabase: true
  customPasswordFiles: {}
  database: my_database
  existingSecret: ''
  password: ''
  replicationPassword: ''
  replicationUser: replicator
  rootPassword: ''
  usePasswordFiles: false
  username: ''
clusterDomain: cluster.local
commonAnnotations: {}
commonLabels: {}
diagnosticMode:
  args:
  - infinity
  command:
  - sleep
  enabled: false
extraDeploy: []
fullnameOverride: ''
global:
  compatibility:
    openshift:
      adaptSecurityContext: auto
  defaultStorageClass: ''
  imagePullSecrets: []
  imageRegistry: ''
  security:
    allowInsecureImages: false
  storageClass: ''
image:
  debug: false
  digest: ''
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/mysql
  tag: 2.4.62-debian-12-r13
initdbScripts: {}
initdbScriptsConfigMap: ''
kubeVersion: ''
metrics:
  containerPorts:
    http: 9104
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    readOnlyRootFilesystem: true
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  enabled: false
  extraArgs:
    primary: []
    secondary: []
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/mysqld-exporter
    tag: 0.16.0-debian-12-r2
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 120
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  prometheusRule:
    additionalLabels: {}
    enabled: false
    namespace: ''
    rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  resources: {}
  resourcesPreset: nano
  service:
    annotations:
      prometheus.io/port: '{{ .Values.metrics.service.port }}'
      prometheus.io/scrape: 'true'
    clusterIP: ''
    port: 9104
    type: ClusterIP
  serviceMonitor:
    annotations: {}
    enabled: false
    honorLabels: false
    interval: 30s
    jobLabel: ''
    labels: {}
    metricRelabelings: []
    namespace: ''
    relabelings: []
    scrapeTimeout: ''
    selector: {}
nameOverride: ''
namespaceOverride: ''
networkPolicy:
  allowExternal: true
  allowExternalEgress: true
  enabled: true
  extraEgress: []
  extraIngress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
passwordUpdateJob:
  annotations: {}
  args: []
  automountServiceAccountToken: false
  backoffLimit: 10
  command: []
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: false
  extraCommands: ''
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  initContainers: []
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  previousPasswords:
    existingSecret: ''
    password: ''
    replicationPassword: ''
    rootPassword: ''
  resources: {}
  resourcesPreset: micro
primary:
  affinity: {}
  args: []
  automountServiceAccountToken: false
  command: []
  configuration: '[mysqld]

    authentication_policy=''{{- .Values.auth.authenticationPolicy | default "* ,,"
    }}''

    skip-name-resolve

    explicit_defaults_for_timestamp

    basedir=/opt/bitnami/mysql

    plugin_dir=/opt/bitnami/mysql/lib/plugin

    port={{ .Values.primary.containerPorts.mysql }}

    mysqlx={{ ternary 1 0 .Values.primary.enableMySQLX }}

    mysqlx_port={{ .Values.primary.containerPorts.mysqlx }}

    socket=/opt/bitnami/mysql/tmp/mysql.sock

    datadir=/bitnami/mysql/data

    tmpdir=/opt/bitnami/mysql/tmp

    max_allowed_packet=16M

    bind-address=*

    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid

    log-error=/opt/bitnami/mysql/logs/mysqld.log

    character-set-server=UTF8

    slow_query_log=0

    long_query_time=10.0

    {{- if .Values.tls.enabled }}

    ssl_cert=/opt/bitnami/mysql/certs/{{ .Values.tls.certFilename }}

    ssl_key=/opt/bitnami/mysql/certs/{{ .Values.tls.certKeyFilename }}

    {{- if (include "mysql.tlsCACert" .) }}

    ssl_ca={{ include "mysql.tlsCACert" . }}

    {{- end }}

    {{- end }}


    [client]

    port={{ .Values.primary.containerPorts.mysql }}

    socket=/opt/bitnami/mysql/tmp/mysql.sock

    default-character-set=UTF8

    plugin_dir=/opt/bitnami/mysql/lib/plugin


    [manager]

    port={{ .Values.primary.containerPorts.mysql }}

    socket=/opt/bitnami/mysql/tmp/mysql.sock

    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid'
  containerPorts:
    mysql: 3306
    mysqlx: 33060
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    readOnlyRootFilesystem: true
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enableMySQLX: false
  existingConfigmap: ''
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraFlags: ''
  extraPodSpec: {}
  extraPorts: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  name: primary
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  pdb:
    create: true
    maxUnavailable: ''
    minAvailable: ''
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ''
    selector: {}
    size: 8Gi
    storageClass: ''
    subPath: ''
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenDeleted: Retain
    whenScaled: Retain
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: ''
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  resources: {}
  resourcesPreset: small
  runtimeClassName: ''
  schedulerName: ''
  service:
    annotations: {}
    clusterIP: ''
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePorts:
      mysql: ''
      mysqlx: ''
    ports:
      mysql: 3306
      mysqlx: 33060
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  sidecars: []
  startupProbe:
    enabled: true
    failureThreshold: 10
    initialDelaySeconds: 15
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  terminationGracePeriodSeconds: ''
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
rbac:
  create: false
  rules: []
secondary:
  affinity: {}
  args: []
  automountServiceAccountToken: false
  command: []
  configuration: '[mysqld]

    authentication_policy=''{{- .Values.auth.authenticationPolicy | default "* ,,"
    }}''

    skip-name-resolve

    explicit_defaults_for_timestamp

    basedir=/opt/bitnami/mysql

    plugin_dir=/opt/bitnami/mysql/lib/plugin

    port={{ .Values.secondary.containerPorts.mysql }}

    mysqlx={{ ternary 1 0 .Values.secondary.enableMySQLX }}

    mysqlx_port={{ .Values.secondary.containerPorts.mysqlx }}

    socket=/opt/bitnami/mysql/tmp/mysql.sock

    datadir=/bitnami/mysql/data

    tmpdir=/opt/bitnami/mysql/tmp

    max_allowed_packet=16M

    bind-address=*

    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid

    log-error=/opt/bitnami/mysql/logs/mysqld.log

    character-set-server=UTF8

    slow_query_log=0

    long_query_time=10.0

    {{- if .Values.tls.enabled }}

    ssl_cert=/opt/bitnami/mysql/certs/{{ .Values.tls.certFilename }}

    ssl_key=/opt/bitnami/mysql/certs/{{ .Values.tls.certKeyFilename }}

    {{- if (include "mysql.tlsCACert" .) }}

    ssl_ca={{ include "mysql.tlsCACert" . }}

    {{- end }}

    {{- end }}


    [client]

    port={{ .Values.secondary.containerPorts.mysql }}

    socket=/opt/bitnami/mysql/tmp/mysql.sock

    default-character-set=UTF8

    plugin_dir=/opt/bitnami/mysql/lib/plugin


    [manager]

    port={{ .Values.secondary.containerPorts.mysql }}

    socket=/opt/bitnami/mysql/tmp/mysql.sock

    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid'
  containerPorts:
    mysql: 3306
    mysqlx: 33060
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    readOnlyRootFilesystem: true
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enableMySQLX: false
  existingConfigmap: ''
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraFlags: ''
  extraPodSpec: {}
  extraPorts: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  name: secondary
  nodeAffinityPreset:
    key: ''
    type: ''
    values: []
  nodeSelector: {}
  pdb:
    create: true
    maxUnavailable: ''
    minAvailable: ''
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ''
    selector: {}
    size: 8Gi
    storageClass: ''
    subPath: ''
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenDeleted: Retain
    whenScaled: Retain
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: ''
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources: {}
  resourcesPreset: small
  runtimeClassName: ''
  schedulerName: ''
  service:
    annotations: {}
    clusterIP: ''
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePorts:
      mysql: ''
      mysqlx: ''
    ports:
      mysql: 3306
      mysqlx: 33060
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  sidecars: []
  startupProbe:
    enabled: true
    failureThreshold: 15
    initialDelaySeconds: 15
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  terminationGracePeriodSeconds: ''
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
serviceAccount:
  annotations: {}
  automountServiceAccountToken: false
  create: true
  name: ''
serviceBindings:
  enabled: false
startdbScripts: {}
startdbScriptsConfigMap: ''
tls:
  autoGenerated:
    certManager:
      duration: 2160h
      existingIssuer: ''
      existingIssuerKind: ''
      keyAlgorithm: RSA
      keySize: 2048
      renewBefore: 360h
    enabled: true
    engine: helm
  ca: ''
  cert: ''
  certCAFilename: ''
  certFilename: tls.crt
  certKeyFilename: tls.key
  enabled: false
  existingSecret: ''
  key: ''
volumePermissions:
  enabled: false
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r33
  resources: {}
  resourcesPreset: nano
